PROCEDURE:
1)CREATE OR REPLACE PROCEDURE group_transactions_by_status
IS
BEGIN
  FOR status_rec IN (SELECT status, COUNT(*) AS count
                     FROM Transactions
                     GROUP BY status)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Status: ' || status_rec.status || ', Count: ' || status_rec.count);
  END LOOP;
END;
This procedure selects all distinct status values from the Transactions table and counts the number of occurrences of each status.
Then it loops through each result and prints the status and count using the DBMS_OUTPUT.PUT_LINE function.


To execute this procedure, you can simply call it like this:
BEGIN
  group_transactions_by_status;
END;

--------------------------------------------------------------------------------------------------------------------------------------------

2)FUNCTION:
CREATE OR REPLACE FUNCTION count_records(table_name IN VARCHAR2)
RETURN NUMBER
IS
    record_count NUMBER;
BEGIN
    EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || table_name INTO record_count;
    RETURN record_count;
END;
This function takes a table name as input and returns the number of records in that table.
It uses dynamic SQL to construct a SELECT statement that counts the number of rows in the specified table,
and then executes that statement and stores the result in a variable named record_count.


To use this function, simply call it with the name of the table you want to count records for, like this:

DECLARE
    num_records NUMBER;
BEGIN
    num_records := count_records('Buyers');
    DBMS_OUTPUT.PUT_LINE('Number of records in Buyers table: ' || num_records);
END;

--------------------------------------------------------------------------------------------------------------------------------------------

3)PROCEDURE with SQL%ROWCOUNT:
CREATE OR REPLACE PROCEDURE update_product_price (p_product_id IN INT, p_new_price IN DECIMAL)
IS
BEGIN
  UPDATE Products
  SET price = p_new_price
  WHERE product_id = p_product_id;
  
  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' rows updated.');
END;
In this procedure, we update the price of a product with the given product ID to the new price provided as input parameter.
After the update statement, we use SQL%ROWCOUNT to determine the number of rows affected by the update and display
the result using DBMS_OUTPUT.PUT_LINE.


DECLARE
  v_product_id INT := 123;
  v_new_price DECIMAL := 99.99; 
BEGIN
  update_product_price(v_product_id, v_new_price);
END;
In this example, we declare two variables v_product_id and v_new_price to hold the input values
 
for the p_product_id and p_new_price parameters of the update_product_price procedure. 
We then call the procedure passing in these variables as arguments.
The procedure will update the product price in the database and output the number of rows affected using DBMS_OUTPUT.PUT_LINE.
--------------------------------------------------------------------------------------------------------------------------------------------

4)Add user-defined exception which disallows to enter title of item (e.g. book) to be less than 5 characters:
CREATE OR REPLACE PROCEDURE add_product (
    p_product_id IN INT,
    p_brand_id IN INT,
    p_name IN VARCHAR2,
    p_description IN VARCHAR2,
    p_price IN DECIMAL,
    p_size IN VARCHAR2,
    p_color IN VARCHAR2,
    p_gender IN VARCHAR2
)
IS
    c_min_title_length CONSTANT INT := 5;
    e_title_too_short EXCEPTION;
BEGIN
    IF LENGTH(p_description) < c_min_title_length THEN
        RAISE e_title_too_short;
    END IF;

    INSERT INTO Products (product_id, brand_id, name, description, price, sizes, color, gender)
    VALUES (p_product_id, p_brand_id, p_name, p_description, p_price, p_size, p_color, p_gender);

    DBMS_OUTPUT.PUT_LINE('Product added successfully');
EXCEPTION
    WHEN e_title_too_short THEN
        DBMS_OUTPUT.PUT_LINE('Error: Title must be at least ' || c_min_title_length || ' characters long');
END;
In this code, we first define a constant c_min_title_length which holds the minimum allowed length for a title.
We then define the exception e_title_too_short. 
Inside the procedure, we check if the length of the p_name parameter is less than the minimum allowed length. 
If it is, we raise the e_title_too_short exception.
If the length of the title is valid, we proceed with the insertion of the product into the Products table. 
If an exception is raised, we catch it and output an error message indicating that the title is too short.


BEGIN
    add_product(4, 4, 'Tommy Hilfiger', 'Tommy Hilfiger is an American brand of men's, women's and children's clothing,
                 underwear, shoes, accessories and perfumes.', 50000, 'Medium', 'Black', 'Male');
END;


--------------------------------------------------------------------------------------------------------------------------------------------

5)Trigger:
CREATE OR REPLACE TRIGGER update_transaction_status
AFTER INSERT ON cancelled
FOR EACH ROW
BEGIN
  UPDATE transactions
  SET status = 'Cancelled'
  WHERE transaction_id = :NEW.transaction_id;
END;
/

This trigger will fire after every insert operation on the "Cancelled" table, and for each row that is inserted, 
it will update the status of the corresponding transaction in the "transactions" table to "Cancelled".

INSERT INTO Cancellations (cancellation_id, transaction_id, reason) VALUES (5, 4, 'did not like');
--------------------------------------------------------------------------------------------------------------------------------------------



